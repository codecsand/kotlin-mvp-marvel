plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.marvelstask.mahmoud"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

//read keys from local.properties file
Properties properties = new Properties()
def propertiesFile = project.rootProject.file('local.properties')
if (propertiesFile.exists()) {
    properties.load(propertiesFile.newDataInputStream())
}
def MARVEL_PRIVATE_KEY = properties.getProperty("marvel_private_key") ?: marvel_private_key
def MARVEL_PUBLIC_KEY = properties.getProperty("marvel_public_key") ?: marvel_public_key

android.buildTypes.each { type ->
    type.buildConfigField "String", "MARVEL_PRIVATE_KEY", "\"$MARVEL_PRIVATE_KEY\""
    type.buildConfigField "String", "MARVEL_PUBLIC_KEY", "\"$MARVEL_PUBLIC_KEY\""
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.annotation:annotation:$annotationVersion"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation "com.squareup.retrofit2:retrofit:$retrofit2_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2_version"

    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    //work manager
    implementation "androidx.work:work-runtime-ktx:$work_version"

    //glide for loading photos
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"
    implementation ("com.github.bumptech.glide:glide:$glide_version@aar") {
        transitive = true
    }

//    //Dagger
//    implementation "com.google.dagger:dagger:$daggerVersion"
//    implementation "com.google.dagger:dagger-android:$daggerVersion_2"
//    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
//    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
//    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
//    kapt  "com.google.dagger:dagger-android-support:$daggerVersion"
}